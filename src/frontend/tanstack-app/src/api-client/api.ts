/* tslint:disable */
/* eslint-disable */
/**
 * TestApp API
 * A sample API to demonstrate OpenAPI integration
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface InsuranceMember
 */
export interface InsuranceMember {
    /**
     * 
     * @type {number}
     * @memberof InsuranceMember
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InsuranceMember
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof InsuranceMember
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof InsuranceMember
     */
    'address1': string;
    /**
     * 
     * @type {string}
     * @memberof InsuranceMember
     */
    'address2'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InsuranceMember
     */
    'city': string;
    /**
     * 
     * @type {string}
     * @memberof InsuranceMember
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof InsuranceMember
     */
    'zip': string;
    /**
     * 
     * @type {string}
     * @memberof InsuranceMember
     */
    'phoneNumber': string;
    /**
     * 
     * @type {string}
     * @memberof InsuranceMember
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof InsuranceMember
     */
    'memberPlan': string;
    /**
     * 
     * @type {string}
     * @memberof InsuranceMember
     */
    'dateOfBirth': string;
    /**
     * 
     * @type {string}
     * @memberof InsuranceMember
     */
    'policyStartDate': string;
    /**
     * 
     * @type {string}
     * @memberof InsuranceMember
     */
    'policyEndDate': string;
}

/**
 * InsuranceMembersApi - axios parameter creator
 * @export
 */
export const InsuranceMembersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInsuranceMembersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/InsuranceMembers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInsuranceMembersIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiInsuranceMembersIdDelete', 'id', id)
            const localVarPath = `/api/InsuranceMembers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInsuranceMembersIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiInsuranceMembersIdGet', 'id', id)
            const localVarPath = `/api/InsuranceMembers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {InsuranceMember} [insuranceMember] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInsuranceMembersIdPut: async (id: number, insuranceMember?: InsuranceMember, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiInsuranceMembersIdPut', 'id', id)
            const localVarPath = `/api/InsuranceMembers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(insuranceMember, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InsuranceMember} [insuranceMember] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInsuranceMembersPost: async (insuranceMember?: InsuranceMember, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/InsuranceMembers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(insuranceMember, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InsuranceMembersApi - functional programming interface
 * @export
 */
export const InsuranceMembersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InsuranceMembersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInsuranceMembersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InsuranceMember>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInsuranceMembersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InsuranceMembersApi.apiInsuranceMembersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInsuranceMembersIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInsuranceMembersIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InsuranceMembersApi.apiInsuranceMembersIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInsuranceMembersIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsuranceMember>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInsuranceMembersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InsuranceMembersApi.apiInsuranceMembersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {InsuranceMember} [insuranceMember] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInsuranceMembersIdPut(id: number, insuranceMember?: InsuranceMember, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInsuranceMembersIdPut(id, insuranceMember, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InsuranceMembersApi.apiInsuranceMembersIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {InsuranceMember} [insuranceMember] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiInsuranceMembersPost(insuranceMember?: InsuranceMember, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InsuranceMember>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiInsuranceMembersPost(insuranceMember, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InsuranceMembersApi.apiInsuranceMembersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * InsuranceMembersApi - factory interface
 * @export
 */
export const InsuranceMembersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InsuranceMembersApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInsuranceMembersGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<InsuranceMember>> {
            return localVarFp.apiInsuranceMembersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInsuranceMembersIdDelete(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiInsuranceMembersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInsuranceMembersIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<InsuranceMember> {
            return localVarFp.apiInsuranceMembersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {InsuranceMember} [insuranceMember] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInsuranceMembersIdPut(id: number, insuranceMember?: InsuranceMember, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiInsuranceMembersIdPut(id, insuranceMember, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InsuranceMember} [insuranceMember] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiInsuranceMembersPost(insuranceMember?: InsuranceMember, options?: RawAxiosRequestConfig): AxiosPromise<InsuranceMember> {
            return localVarFp.apiInsuranceMembersPost(insuranceMember, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InsuranceMembersApi - object-oriented interface
 * @export
 * @class InsuranceMembersApi
 * @extends {BaseAPI}
 */
export class InsuranceMembersApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsuranceMembersApi
     */
    public apiInsuranceMembersGet(options?: RawAxiosRequestConfig) {
        return InsuranceMembersApiFp(this.configuration).apiInsuranceMembersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsuranceMembersApi
     */
    public apiInsuranceMembersIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return InsuranceMembersApiFp(this.configuration).apiInsuranceMembersIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsuranceMembersApi
     */
    public apiInsuranceMembersIdGet(id: number, options?: RawAxiosRequestConfig) {
        return InsuranceMembersApiFp(this.configuration).apiInsuranceMembersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {InsuranceMember} [insuranceMember] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsuranceMembersApi
     */
    public apiInsuranceMembersIdPut(id: number, insuranceMember?: InsuranceMember, options?: RawAxiosRequestConfig) {
        return InsuranceMembersApiFp(this.configuration).apiInsuranceMembersIdPut(id, insuranceMember, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {InsuranceMember} [insuranceMember] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InsuranceMembersApi
     */
    public apiInsuranceMembersPost(insuranceMember?: InsuranceMember, options?: RawAxiosRequestConfig) {
        return InsuranceMembersApiFp(this.configuration).apiInsuranceMembersPost(insuranceMember, options).then((request) => request(this.axios, this.basePath));
    }
}



